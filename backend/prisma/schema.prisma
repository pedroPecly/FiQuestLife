generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id @default(uuid())
  email                String          @unique
  username             String          @unique
  name                 String
  password             String
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime        @updatedAt @map("updated_at")
  avatarUrl            String?         @map("avatar_url")
  bio                  String?
  coins                Int             @default(0)
  currentStreak        Int             @default(0) @map("current_streak")
  dailyReminderTime    String?         @map("daily_reminder_time")
  lastActiveDate       DateTime?       @map("last_active_date")
  level                Int             @default(1)
  longestStreak        Int             @default(0) @map("longest_streak")
  notificationsEnabled Boolean         @default(true) @map("notifications_enabled")
  profilePublic        Boolean         @default(false) @map("profile_public")
  xp                   Int             @default(0)
  birthDate            DateTime        @map("birth_date")
  userChallenges       UserChallenge[]

  @@map("users")
}

/// *
///  * Tabela de desafios (catálogo)
///  * 
///  * Exemplos:
///  * - "Beber 2L de água" (DAILY, HYDRATION, EASY)
///  * - "Meditar por 10 minutos" (DAILY, MINDFULNESS, MEDIUM)
///  * - "Ir à academia 3x na semana" (WEEKLY, PHYSICAL_ACTIVITY, HARD)
model Challenge {
  id             String              @id @default(uuid())
  title          String
  description    String
  category       ChallengeCategory
  difficulty     ChallengeDifficulty
  xpReward       Int                 @map("xp_reward")
  coinsReward    Int                 @map("coins_reward")
  isActive       Boolean             @default(true) @map("is_active")
  frequency      ChallengeFrequency  @default(DAILY)
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  userChallenges UserChallenge[]

  @@map("challenges")
}

/// *
///  * Relação N:N entre User e Challenge
///  * 
///  * Cada registro representa um desafio atribuído a um usuário.
///  * O mesmo usuário pode ter o mesmo desafio várias vezes
///  * (ex: "Beber 2L de água" todos os dias)
///  * 
///  * Por isso temos @@unique([userId, challengeId, assignedAt])
///  * - Garante que um usuário não tenha o mesmo desafio 2x no mesmo momento
///  * - Mas permite ter o mesmo desafio em dias diferentes
model UserChallenge {
  id          String          @id @default(uuid())
  userId      String          @map("user_id")
  challengeId String          @map("challenge_id")
  status      ChallengeStatus @default(PENDING)
  assignedAt  DateTime        @default(now()) @map("assigned_at")
  completedAt DateTime?       @map("completed_at")
  progress    Int             @default(0)
  notes       String?
  challenge   Challenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId, assignedAt])
  @@index([userId, status])
  @@index([assignedAt])
  @@map("user_challenges")
}

/// *
///  * Categorias de desafios disponíveis
///  * Organiza os desafios por área da vida
enum ChallengeCategory {
  PHYSICAL_ACTIVITY
  NUTRITION
  HYDRATION
  MENTAL_HEALTH
  SLEEP
  SOCIAL
  PRODUCTIVITY
  MINDFULNESS
}

/// *
///  * Níveis de dificuldade dos desafios
///  * Determina XP e moedas ganhas
enum ChallengeDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

/// *
///  * Frequência de repetição do desafio
///  * Define como o desafio se repete
enum ChallengeFrequency {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

/// *
///  * Status do desafio para o usuário
///  * Rastreia o progresso individual
enum ChallengeStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  SKIPPED
}
