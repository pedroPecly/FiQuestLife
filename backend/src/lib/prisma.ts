/**
 * ============================================
 * CONFIGURA√á√ÉO DO PRISMA CLIENT
 * ============================================
 * 
 * Prisma √© o ORM (Object-Relational Mapping) que a gente usa
 * pra conversar com o banco de dados sem escrever SQL puro.
 * 
 * Em vez de escrever:
 *   SELECT * FROM users WHERE id = 1
 * 
 * A gente escreve:
 *   prisma.user.findUnique({ where: { id: 1 } })
 * 
 * Muito mais f√°cil n√©? üòé
 * 
 * ============================================
 * POR QUE ESSE C√ìDIGO MEIO ESTRANHO?
 * ============================================
 * 
 * No desenvolvimento, quando voc√™ salva um arquivo, o servidor reinicia.
 * Se cri√°ssemos um novo PrismaClient toda vez, ia ter v√°rias conex√µes
 * abertas com o banco ao mesmo tempo = problema!
 * 
 * Ent√£o, a gente guarda o cliente numa vari√°vel global.
 * Se j√° existir, reutiliza. Se n√£o, cria um novo.
 * 
 * √â tipo um Singleton Pattern (padr√£o de projeto que voc√™ v√™ na faculdade!)
 */

import { PrismaClient } from '@prisma/client';

// Cria um tipo pro globalThis incluir o prisma
// (TypeScript pede isso pra saber que existe uma propriedade prisma)
const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined;
};

// Se j√° tiver um prisma criado, usa ele. Se n√£o, cria um novo.
// O operador ?? √© tipo: "se for null/undefined, use o que t√° depois"
export const prisma = globalForPrisma.prisma ?? new PrismaClient();

// Em desenvolvimento, salva o cliente na vari√°vel global
// pra n√£o criar v√°rios clientes quando o servidor reiniciar
if (process.env.NODE_ENV !== 'production') {
  globalForPrisma.prisma = prisma;
}

/**
 * ============================================
 * COMO USAR ESSE ARQUIVO?
 * ============================================
 * 
 * Em qualquer arquivo, importe assim:
 *   import { prisma } from './lib/prisma.js';
 * 
 * A√≠ pode usar pra fazer queries:
 *   const users = await prisma.user.findMany();
 *   const user = await prisma.user.create({ data: { name: 'Pedro' } });
 */
