/**
 * ============================================
 * SERVI√áO DE NOTIFICA√á√ïES
 * ============================================
 * 
 * Gerencia todas as notifica√ß√µes do app:
 * - Permiss√µes
 * - Notifica√ß√µes agendadas (lembretes di√°rios)
 * - Notifica√ß√µes instant√¢neas (badges, level up)
 * - Configura√ß√µes do usu√°rio
 * 
 * Tecnologia: Expo Notifications
 * @created 27 de outubro de 2025
 */

import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';
import { saveNotification } from './notificationCenter';

// ==========================================
// TIPOS
// ==========================================

export type NotificationType = 
  | 'DAILY_REMINDER'    // Lembrete de desafios di√°rios (9h)
  | 'CHALLENGE_ASSIGNED' // Novos desafios atribu√≠dos
  | 'BADGE_EARNED'      // Badge conquistado
  | 'LEVEL_UP'          // Subiu de n√≠vel
  | 'STREAK_REMINDER';  // Lembrete de streak (21h)

export interface NotificationData {
  type: NotificationType;
  title: string;
  body: string;
  data?: any;
}

// ==========================================
// CONFIGURA√á√ïES GLOBAIS
// ==========================================

/**
 * Define como o app deve se comportar ao receber notifica√ß√£o
 * - shouldShowAlert: mostrar banner/alert
 * - shouldPlaySound: tocar som
 * - shouldSetBadge: atualizar badge no √≠cone do app
 */
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
});

// ==========================================
// CONSTANTES
// ==========================================

const STORAGE_KEY = '@fiquestlife:notifications_enabled';

// ==========================================
// PERMISS√ïES
// ==========================================

/**
 * Solicita permiss√£o para enviar notifica√ß√µes
 * Obrigat√≥rio para iOS, recomendado para Android
 * 
 * @returns true se permiss√£o concedida, false caso contr√°rio
 */
export async function requestNotificationPermissions(): Promise<boolean> {
  // Notifica√ß√µes n√£o funcionam no simulador/emulador
  if (!Device.isDevice) {
    console.warn('‚ö†Ô∏è Notifica√ß√µes n√£o funcionam no simulador');
    return false;
  }

  // Verifica permiss√£o atual
  const { status: existingStatus } = await Notifications.getPermissionsAsync();
  let finalStatus = existingStatus;

  // Se n√£o tem permiss√£o, solicita
  if (existingStatus !== 'granted') {
    const { status } = await Notifications.requestPermissionsAsync();
    finalStatus = status;
  }

  // Se permiss√£o negada
  if (finalStatus !== 'granted') {
    console.warn('‚ùå Permiss√£o de notifica√ß√£o negada');
    return false;
  }

  // Configurar canal de notifica√ß√£o (Android obrigat√≥rio)
  if (Platform.OS === 'android') {
    await Notifications.setNotificationChannelAsync('default', {
      name: 'FiQuestLife',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#20B2AA',
      sound: 'default',
      enableVibrate: true,
    });
  }

  console.log('‚úÖ Permiss√£o de notifica√ß√£o concedida');
  return true;
}

/**
 * Verifica se notifica√ß√µes est√£o habilitadas
 * @returns true se permitidas, false caso contr√°rio
 */
export async function areNotificationsEnabled(): Promise<boolean> {
  const settings = await Notifications.getPermissionsAsync();
  return settings.granted;
}

// ==========================================
// NOTIFICA√á√ïES AGENDADAS (LEMBRETES)
// ==========================================

/**
 * Agenda lembrete di√°rio de desafios
 * Envia todo dia √†s 9h da manh√£
 * Lembra usu√°rio de completar seus desafios di√°rios
 */
export async function scheduleDailyReminder(): Promise<void> {
  try {
    // Cancela lembretes anteriores para evitar duplica√ß√£o
    const scheduled = await Notifications.getAllScheduledNotificationsAsync();
    for (const notif of scheduled) {
      if (notif.content.data?.type === 'DAILY_REMINDER') {
        await Notifications.cancelScheduledNotificationAsync(notif.identifier);
      }
    }

    // Agenda novo lembrete di√°rio (9h)
    await Notifications.scheduleNotificationAsync({
      content: {
        title: 'üéØ Novos Desafios Dispon√≠veis!',
        body: 'Seus desafios di√°rios j√° est√£o prontos. Vamos conquist√°-los?',
        data: { type: 'DAILY_REMINDER' },
        sound: true,
        badge: 1,
      },
      trigger: {
        type: Notifications.SchedulableTriggerInputTypes.DAILY,
        hour: 9,
        minute: 0,
      },
    });

    console.log('‚úÖ Lembrete di√°rio agendado para 9h');
  } catch (error) {
    console.error('‚ùå Erro ao agendar lembrete di√°rio:', error);
  }
}

/**
 * Agenda lembrete de streak (final do dia)
 * Envia √†s 21h se n√£o completou nenhum desafio
 * Evita que usu√°rio perca sua sequ√™ncia
 */
export async function scheduleStreakReminder(): Promise<void> {
  try {
    // Cancela lembretes anteriores
    const scheduled = await Notifications.getAllScheduledNotificationsAsync();
    for (const notif of scheduled) {
      if (notif.content.data?.type === 'STREAK_REMINDER') {
        await Notifications.cancelScheduledNotificationAsync(notif.identifier);
      }
    }

    // Agenda novo lembrete de streak (21h)
    await Notifications.scheduleNotificationAsync({
      content: {
        title: 'üî• N√£o perca sua sequ√™ncia!',
        body: 'Complete pelo menos um desafio hoje para manter seu streak!',
        data: { type: 'STREAK_REMINDER' },
        sound: true,
        badge: 1,
      },
      trigger: {
        type: Notifications.SchedulableTriggerInputTypes.DAILY,
        hour: 21,
        minute: 0,
      },
    });

    console.log('‚úÖ Lembrete de streak agendado para 21h');
  } catch (error) {
    console.error('‚ùå Erro ao agendar lembrete de streak:', error);
  }
}

/**
 * Cancela lembrete de streak
 * Chamado quando usu√°rio completa um desafio
 * Evita notifica√ß√£o desnecess√°ria
 */
export async function cancelStreakReminder(): Promise<void> {
  try {
    const scheduled = await Notifications.getAllScheduledNotificationsAsync();
    
    for (const notif of scheduled) {
      if (notif.content.data?.type === 'STREAK_REMINDER') {
        await Notifications.cancelScheduledNotificationAsync(notif.identifier);
        console.log('‚úÖ Lembrete de streak cancelado (desafio completado)');
      }
    }
  } catch (error) {
    console.error('‚ùå Erro ao cancelar lembrete de streak:', error);
  }
}

/**
 * Cancela todas as notifica√ß√µes agendadas
 * Usado quando usu√°rio desabilita notifica√ß√µes
 */
export async function cancelAllScheduledNotifications(): Promise<void> {
  try {
    await Notifications.cancelAllScheduledNotificationsAsync();
    console.log('‚úÖ Todas as notifica√ß√µes agendadas canceladas');
  } catch (error) {
    console.error('‚ùå Erro ao cancelar notifica√ß√µes:', error);
  }
}

// ==========================================
// NOTIFICA√á√ïES INSTANT√ÇNEAS
// ==========================================

/**
 * Notifica imediatamente quando usu√°rio conquista badge
 * @param badgeName Nome do badge conquistado
 * @param rarity Raridade (COMMON, RARE, EPIC, LEGENDARY)
 */
export async function notifyBadgeEarned(badgeName: string, rarity: string): Promise<void> {
  try {
    const rarityEmojis: Record<string, string> = {
      COMMON: '‚ö™',
      RARE: 'üîµ',
      EPIC: 'üü£',
      LEGENDARY: 'üü†',
    };

    const emoji = rarityEmojis[rarity] || 'üèÜ';

    await Notifications.scheduleNotificationAsync({
      content: {
        title: `${emoji} Badge Conquistado!`,
        body: `Parab√©ns! Voc√™ desbloqueou "${badgeName}"`,
        data: { type: 'BADGE_EARNED', badgeName, rarity },
        sound: true,
        badge: 1,
      },
      trigger: null, // Envia imediatamente
    });

    console.log(`‚úÖ Notifica√ß√£o de badge enviada: ${badgeName}`);
  } catch (error) {
    console.error('‚ùå Erro ao notificar badge:', error);
  }
}

/**
 * Notifica quando usu√°rio sobe de n√≠vel
 * @param newLevel Novo n√≠vel alcan√ßado
 */
export async function notifyLevelUp(newLevel: number): Promise<void> {
  try {
    await Notifications.scheduleNotificationAsync({
      content: {
        title: 'üéâ Level Up!',
        body: `Incr√≠vel! Voc√™ subiu para o n√≠vel ${newLevel}!`,
        data: { type: 'LEVEL_UP', level: newLevel },
        sound: true,
        badge: 1,
      },
      trigger: null, // Envia imediatamente
    });

    console.log(`‚úÖ Notifica√ß√£o de level up enviada: N√≠vel ${newLevel}`);
  } catch (error) {
    console.error('‚ùå Erro ao notificar level up:', error);
  }
}

/**
 * Notifica quando novos desafios s√£o atribu√≠dos
 * @param count N√∫mero de desafios atribu√≠dos (padr√£o: 5)
 */
export async function notifyChallengesAssigned(count: number = 5): Promise<void> {
  try {
    await Notifications.scheduleNotificationAsync({
      content: {
        title: 'üéØ Novos Desafios!',
        body: `${count} novos desafios foram atribu√≠dos para voc√™ hoje!`,
        data: { type: 'CHALLENGE_ASSIGNED', count },
        sound: true,
        badge: count,
      },
      trigger: null, // Envia imediatamente
    });

    console.log(`‚úÖ Notifica√ß√£o de desafios enviada: ${count} desafios`);
  } catch (error) {
    console.error('‚ùå Erro ao notificar desafios:', error);
  }
}

// ==========================================
// CONFIGURA√á√ïES DO USU√ÅRIO
// ==========================================

/**
 * Salva prefer√™ncia de notifica√ß√µes do usu√°rio
 * @param enabled true para ativar, false para desativar
 */
export async function setNotificationsEnabled(enabled: boolean): Promise<void> {
  try {
    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(enabled));

    if (enabled) {
      // Ativa notifica√ß√µes - agenda lembretes
      await scheduleDailyReminder();
      await scheduleStreakReminder();
      console.log('‚úÖ Notifica√ß√µes ativadas');
    } else {
      // Desativa notifica√ß√µes - cancela todos os lembretes
      await cancelAllScheduledNotifications();
      console.log('‚úÖ Notifica√ß√µes desativadas');
    }
  } catch (error) {
    console.error('‚ùå Erro ao salvar prefer√™ncia de notifica√ß√µes:', error);
  }
}

/**
 * Verifica se usu√°rio quer receber notifica√ß√µes
 * @returns true se ativado, false se desativado
 */
export async function getNotificationsEnabled(): Promise<boolean> {
  try {
    const value = await AsyncStorage.getItem(STORAGE_KEY);
    return value ? JSON.parse(value) : true; // Default: ativado
  } catch (error) {
    console.error('‚ùå Erro ao carregar prefer√™ncia de notifica√ß√µes:', error);
    return true; // Default em caso de erro
  }
}

// ==========================================
// LISTENERS
// ==========================================

/**
 * Salva notifica√ß√£o recebida no hist√≥rico local (in-app)
 * Chamado automaticamente quando notifica√ß√£o chega
 */
async function saveNotificationToHistory(notification: Notifications.Notification) {
  try {
    const { title, body, data } = notification.request.content;
    
    await saveNotification({
      type: (data?.type as NotificationType) || 'DAILY_REMINDER',
      title: title || 'Notifica√ß√£o',
      body: body || '',
      data: data,
    });
  } catch (error) {
    console.error('Erro ao salvar notifica√ß√£o no hist√≥rico:', error);
  }
}

/**
 * Adiciona listener para quando usu√°rio toca na notifica√ß√£o
 * Usado para navegar para tela apropriada
 * 
 * @param callback Fun√ß√£o chamada quando usu√°rio toca
 * @returns Subscription (para cleanup)
 */
export function addNotificationResponseListener(
  callback: (response: Notifications.NotificationResponse) => void
) {
  return Notifications.addNotificationResponseReceivedListener(callback);
}

/**
 * Adiciona listener para notifica√ß√µes recebidas (app aberto)
 * Usado para atualizar UI quando notifica√ß√£o chega
 * TAMB√âM salva notifica√ß√£o no hist√≥rico in-app
 * 
 * @param callback Fun√ß√£o chamada quando notifica√ß√£o chega
 * @returns Subscription (para cleanup)
 */
export function addNotificationReceivedListener(
  callback: (notification: Notifications.Notification) => void
) {
  return Notifications.addNotificationReceivedListener((notification) => {
    // Salva no hist√≥rico in-app
    saveNotificationToHistory(notification);
    
    // Chama callback do usu√°rio
    callback(notification);
  });
}

// ==========================================
// UTILIT√ÅRIOS
// ==========================================

/**
 * Lista todas as notifica√ß√µes agendadas (debug)
 * @returns Array de notifica√ß√µes agendadas
 */
export async function getScheduledNotifications() {
  const scheduled = await Notifications.getAllScheduledNotificationsAsync();
  console.log('üìã Notifica√ß√µes agendadas:', scheduled.length);
  scheduled.forEach((notif) => {
    console.log(`  - ${notif.content.title} (${notif.content.data?.type})`);
  });
  return scheduled;
}
