feat: Sprint 6 - Frontend de Desafios (Challenges Screen)

Implementação completa da tela de desafios diários no frontend,
incluindo componente ChallengeCard, serviço de API, e integração
total com o backend. Usuários agora podem visualizar e completar
desafios diários com feedback visual completo.

═══════════════════════════════════════════════════════════════
📦 ARQUIVOS CRIADOS (6 arquivos, 776 linhas totais)
═══════════════════════════════════════════════════════════════

1️⃣ services/challenge.ts (191 linhas)
   ├─ Interfaces TypeScript:
   │  ├─ Challenge (10 propriedades)
   │  ├─ UserChallenge (7 propriedades)
   │  ├─ CompleteChallengeResponse (5 propriedades)
   │  └─ ChallengeHistoryItem (4 propriedades)
   ├─ Types:
   │  ├─ ChallengeCategory (8 valores)
   │  ├─ ChallengeDifficulty (4 valores)
   │  ├─ ChallengeStatus (4 valores)
   │  └─ ChallengeFrequency (3 valores)
   ├─ Mapeamentos:
   │  ├─ CATEGORY_COLORS (8 categorias com cores hex)
   │  ├─ CATEGORY_LABELS (8 labels em português)
   │  ├─ CATEGORY_ICONS (8 emojis)
   │  ├─ DIFFICULTY_COLORS (4 dificuldades com cores hex)
   │  └─ DIFFICULTY_LABELS (4 labels em português)
   └─ Funções de API:
      ├─ getDailyChallenges(): UserChallenge[]
      ├─ completeChallenge(id): CompleteChallengeResponse
      ├─ getChallengeHistory(): ChallengeHistoryItem[]
      └─ getAllChallenges(): Challenge[]

2️⃣ components/ui/ChallengeCard.tsx (186 linhas)
   ├─ Props: userChallenge, onComplete, isCompleting
   ├─ Elementos visuais:
   │  ├─ Header com badges de categoria (8 cores) e dificuldade (4 cores)
   │  ├─ Título em negrito (fontSize 18)
   │  ├─ Descrição em texto secundário
   │  ├─ Row de recompensas (⭐ XP + 💰 coins)
   │  ├─ Botão com 3 estados (ativo/loading/completo)
   │  └─ Overlay verde em desafios completos
   └─ Estilos com sombras e elevação

3️⃣ app/screens/ChallengesScreen.tsx (258 linhas)
   ├─ Hooks:
   │  ├─ useState: user, challenges, loading, refreshing, completingId
   │  ├─ useEffect: carrega dados iniciais
   │  ├─ useCallback: onRefresh para pull-to-refresh
   │  └─ useAlert: feedback visual
   ├─ Funções:
   │  ├─ loadData(): carrega user + challenges em paralelo
   │  ├─ onRefresh(): pull-to-refresh
   │  └─ handleCompleteChallenge(id): completa desafio + atualiza UI
   ├─ Layout:
   │  ├─ Header com saudação e 4 stats (nível, XP, coins, streak)
   │  ├─ Card de progresso com % e barra visual
   │  ├─ Lista de ChallengeCards
   │  └─ Estado vazio com ícone e instruções
   └─ Feedback:
      ├─ Loading individual por botão
      ├─ Atualização de stats em tempo real
      ├─ Alert de sucesso com recompensas
      ├─ Mensagem de level up se aplicável
      └─ Notificação de novos badges

4️⃣ app/styles/challenges.styles.ts (138 linhas)
   └─ Estilos completos: container, header, stats, progress,
      challenges list, empty state, etc.

5️⃣ app/(tabs)/challenges.tsx (3 linhas)
   └─ Rota da tab de desafios

6️⃣ app/challenges.tsx (3 linhas)
   └─ Rota standalone (opcional)

═══════════════════════════════════════════════════════════════
🔄 ARQUIVOS ATUALIZADOS (3 arquivos)
═══════════════════════════════════════════════════════════════

1️⃣ components/ui/index.ts
   └─ Adicionado export do ChallengeCard

2️⃣ app/screens/index.ts
   └─ Adicionado export do ChallengesScreen

3️⃣ app/(tabs)/_layout.tsx
   ├─ Nova tab "Desafios" entre Home e Explorar
   ├─ Ícone: MaterialCommunityIcons trophy/trophy-outline
   └─ Total: 4 tabs (Home, Desafios, Explorar, Configurações)

═══════════════════════════════════════════════════════════════
🎯 FUNCIONALIDADES IMPLEMENTADAS (17)
═══════════════════════════════════════════════════════════════

✅ Visualização de desafios diários (5 por dia)
✅ Completar desafio com um toque
✅ Atualização automática de XP, coins, level e streak
✅ Feedback visual de level up (alert)
✅ Notificação de novos badges conquistados
✅ Barra de progresso (X/5 desafios completos)
✅ Pull-to-refresh para atualizar lista
✅ Estado vazio com ícone e instrução
✅ Loading individual por botão (não bloqueia UI)
✅ Cards coloridos por categoria (8 cores)
✅ Cards coloridos por dificuldade (4 cores)
✅ Overlay verde em desafios completos
✅ Ícones de categoria (8 emojis)
✅ Stats no header (nível, XP, coins, streak)
✅ Mensagem de "todos completos" quando 5/5
✅ Integração completa com backend (4 endpoints)
✅ Tratamento de erros com alerts

═══════════════════════════════════════════════════════════════
🎨 CORES E CATEGORIAS
═══════════════════════════════════════════════════════════════

Categorias (8):
├─ 💪 PHYSICAL_ACTIVITY → Azul #3B82F6
├─ 🥗 NUTRITION → Verde #10B981
├─ 💧 HYDRATION → Ciano #06B6D4
├─ 🧠 MENTAL_HEALTH → Roxo #8B5CF6
├─ 😴 SLEEP → Índigo #6366F1
├─ 👥 SOCIAL → Rosa #EC4899
├─ 🎯 PRODUCTIVITY → Laranja #F59E0B
└─ 🧘 MINDFULNESS → Teal #14B8A6

Dificuldades (4):
├─ EASY → Verde #10B981
├─ MEDIUM → Laranja #F59E0B
├─ HARD → Vermelho #EF4444
└─ EXPERT → Roxo #7C3AED

═══════════════════════════════════════════════════════════════
🌐 INTEGRAÇÃO COM BACKEND
═══════════════════════════════════════════════════════════════

Endpoints utilizados:
├─ GET /challenges/daily → Lista desafios do dia
├─ POST /challenges/:id/complete → Completa desafio
├─ GET /challenges/history → Histórico de desafios
├─ GET /challenges/all → Todos os desafios disponíveis
└─ GET /user/me → Dados do usuário (stats)

═══════════════════════════════════════════════════════════════
📊 MÉTRICAS DO SPRINT 6
═══════════════════════════════════════════════════════════════

📦 6 arquivos criados (776 linhas)
🔄 3 arquivos atualizados
🎨 1 novo componente de UI (ChallengeCard)
📱 1 nova tela (ChallengesScreen)
🗺️ 1 nova tab na navegação
🌐 4 funções de API integradas
🎯 17 funcionalidades implementadas
🎨 12 cores mapeadas (8 categorias + 4 dificuldades)
🏗️ 5 interfaces TypeScript
🔢 4 types/enums
📋 4 mapeamentos de constantes

═══════════════════════════════════════════════════════════════
📚 DOCUMENTAÇÃO ATUALIZADA
═══════════════════════════════════════════════════════════════

✅ README.md:
   ├─ Estrutura do projeto atualizada
   ├─ Seção de componentes (agora 13 componentes)
   ├─ Seção de services (adicionado challenge.ts)
   ├─ Sprint 6 marcada como ✅ CONCLUÍDA
   └─ Changelog com entrada completa do Sprint 6

✅ roadmap_fiquestlife.md:
   ├─ Versão atualizada para 1.2
   ├─ Status: "Frontend de Desafios Completo ✅"
   ├─ Sprint 6 marcada como ✅ IMPLEMENTADO EM 20/10/2025
   └─ Detalhes completos de implementação

═══════════════════════════════════════════════════════════════
🚀 PRÓXIMOS PASSOS
═══════════════════════════════════════════════════════════════

Sprint 7 - Interface de Badges (Frontend):
├─ Criar services/badge.ts
├─ Criar componente BadgeCard
├─ Criar tela BadgesScreen
├─ Modal de detalhes do badge
├─ Filtros (Todos, Conquistados, Bloqueados)
├─ Barra de progresso para badges não conquistados
└─ Cores por raridade (COMMON, RARE, EPIC, LEGENDARY)

═══════════════════════════════════════════════════════════════
🔍 NOTAS TÉCNICAS
═══════════════════════════════════════════════════════════════

- Todas as interfaces TypeScript tipadas corretamente
- Zero erros de compilação TypeScript
- Componentes seguem padrão de estilos do projeto
- Pull-to-refresh implementado com RefreshControl nativo
- Loading individual por botão (melhor UX)
- Estados de erro tratados com useAlert
- Integração com authStorage para token JWT
- Cards com sombras e elevação consistentes
- Cores acessíveis (contraste adequado)
- Emojis como ícones para melhor UX
- Feedback visual completo (loading, success, error)

═══════════════════════════════════════════════════════════════

BREAKING CHANGES: Nenhuma

Co-authored-by: GitHub Copilot <copilot@github.com>
